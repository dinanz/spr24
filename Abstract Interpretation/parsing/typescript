ocamllex -q lexer.mll
ocamlc -c abstractSyntax.ml
ocamlc -c printer.ml
menhir --infer --explain parser.mly
ocamlc -c parser.mli
ocamlc -c lexer.ml
ocamlc -c parser.ml
ocamlc -c main.ml
ocamlc abstractSyntax.cmo printer.cmo parser.cmo lexer.cmo main.cmo -o main
# using the abstract interpreter:
**************************************************
*** ;
<l1, l2, ff, l0>     Prog:
<l1, l2, ff, l0>        l1: ; 
                     l2: 
**************************************************
*** x = 42;
<l1, l2, ff, l0>     Prog:
<l1, l2, ff, l0>        l1: x = 42; 
                     l2: 
**************************************************
*** x = 7; ; break; 
Error: no break allowed out of a program
<l1, l4, ff, l0>     Prog:
<l1, l2, ff, l0>        l1: x = 7; 
<l2, l3, ff, l0>        l2: ; 
<l3, l4, tt, l4>        l3: break; 
                     l4: 
**************************************************
*** {}
<l1, l1, ff, l0>     Prog:
<l1, l1, ff, l0>        Stmtlist: {
                        } 
                     l1: 
**************************************************
*** x=-10-20--40;
<l1, l2, ff, l0>     Prog:
<l1, l2, ff, l0>        l1: x = (((0 - 10) - 20) - (0 - 40)); 
                     l2: 
**************************************************
*** x=1; y=2;
<l1, l3, ff, l0>     Prog:
<l1, l2, ff, l0>        l1: x = 1; 
<l2, l3, ff, l0>        l2: y = 2; 
                     l3: 
**************************************************
*** {x=10; ; y=20;}
<l1, l4, ff, l0>     Prog:
<l1, l4, ff, l0>        Stmtlist: {
<l1, l2, ff, l0>           l1: x = 10; 
<l2, l3, ff, l0>           l2: ; 
<l3, l4, ff, l0>           l3: y = 20; 
                        } 
                     l4: 
**************************************************
*** if (1-2<3-4-5) x=-x;
<l1, l3, ff, l0>     Prog:
<l1, l3, ff, l0>        (if l1: ((1 - 2) < ((3 - 4) - 5))
<l2, l3, ff, l0>           l2: x = (0 - x); ) 
                     l3: 
**************************************************
*** if (x<1) if (x<0) x=1; else if (x<0) { x=2; x=3; } else { x=4; x=5; x=6; }
<l1, l10, ff, l0>    Prog:
<l1, l10, ff, l0>       (if l1: (x < 1)
<l2, l10, ff, l0>          (if l2: (x < 0)
<l3, l10, ff, l0>             l3: x = 1; 
                            else 
<l4, l10, ff, l0>             (if l4: (x < 0)
<l5, l10, ff, l0>                Stmtlist: {
<l5, l6, ff, l0>                    l5: x = 2; 
<l6, l10, ff, l0>                   l6: x = 3; 
                                 } 
                               else 
<l7, l10, ff, l0>                Stmtlist: {
<l7, l8, ff, l0>                    l7: x = 4; 
<l8, l9, ff, l0>                    l8: x = 5; 
<l9, l10, ff, l0>                   l9: x = 6; 
                                 } ) ) ) 
                     l10: 
**************************************************
*** while (0<1) {}
<l1, l2, ff, l0>     Prog:
<l1, l2, ff, l0>        (while l1: (0 < 1)
<l2, l1, ff, l0>           Stmtlist: {
                           } ) 
                     l2: 
**************************************************
*** while (x<1) {}
<l1, l2, ff, l0>     Prog:
<l1, l2, ff, l0>        (while l1: (x < 1)
<l2, l1, ff, l0>           Stmtlist: {
                           } ) 
                     l2: 
**************************************************
*** while (1<x) x=x-1;
<l1, l3, ff, l0>     Prog:
<l1, l3, ff, l0>        (while l1: (1 < x)
<l2, l1, ff, l0>           l2: x = (x - 1); ) 
                     l3: 
**************************************************
*** while (3<x) x=x-1;
<l1, l3, ff, l0>     Prog:
<l1, l3, ff, l0>        (while l1: (3 < x)
<l2, l1, ff, l0>           l2: x = (x - 1); ) 
                     l3: 
**************************************************
*** while (10<x) x=x-1;
<l1, l3, ff, l0>     Prog:
<l1, l3, ff, l0>        (while l1: (10 < x)
<l2, l1, ff, l0>           l2: x = (x - 1); ) 
                     l3: 
**************************************************
*** while (0<1){}
<l1, l2, ff, l0>     Prog:
<l1, l2, ff, l0>        (while l1: (0 < 1)
<l2, l1, ff, l0>           Stmtlist: {
                           } ) 
                     l2: 
**************************************************
*** while (x<3) { x=x-(-1); if (1<x) break; }
<l1, l5, ff, l0>     Prog:
<l1, l5, ff, l0>        (while l1: (x < 3)
<l2, l1, tt, l5>           Stmtlist: {
<l2, l3, ff, l0>              l2: x = (x - (0 - 1)); 
<l3, l1, tt, l5>              (if l3: (1 < x)
<l4, l1, tt, l5>                 l4: break; ) 
                           } ) 
                     l5: 
**************************************************
*** while (x<3) { if (1<x) break; else x=x-(-1); }
<l1, l5, ff, l0>     Prog:
<l1, l5, ff, l0>        (while l1: (x < 3)
<l2, l1, tt, l5>           Stmtlist: {
<l2, l1, tt, l5>              (if l2: (1 < x)
<l3, l1, tt, l5>                 l3: break; 
                               else 
<l4, l1, ff, l0>                 l4: x = (x - (0 - 1)); ) 
                           } ) 
                     l5: 
**************************************************
*** x=x-1;while (0<1){x=x-1;if(x<2)break;};
<l1, l7, ff, l0>     Prog:
<l1, l2, ff, l0>        l1: x = (x - 1); 
<l2, l6, ff, l0>        (while l2: (0 < 1)
<l3, l2, tt, l6>           Stmtlist: {
<l3, l4, ff, l0>              l3: x = (x - 1); 
<l4, l2, tt, l6>              (if l4: (x < 2)
<l5, l2, tt, l6>                 l5: break; ) 
                           } ) 
<l6, l7, ff, l0>        l6: ; 
                     l7: 
**************************************************
*** x=0; while (x<0) { while (x<0) x=x-1; x= 10; }; x= 100;
<l1, l8, ff, l0>     Prog:
<l1, l2, ff, l0>        l1: x = 0; 
<l2, l6, ff, l0>        (while l2: (x < 0)
<l3, l2, ff, l0>           Stmtlist: {
<l3, l5, ff, l0>              (while l3: (x < 0)
<l4, l3, ff, l0>                 l4: x = (x - 1); ) 
<l5, l2, ff, l0>              l5: x = 10; 
                           } ) 
<l6, l7, ff, l0>        l6: ; 
<l7, l8, ff, l0>        l7: x = 100; 
                     l8: 
**************************************************
*** x=-10; while (x<0) if (x<0) if (0<x) x=-x;
<l1, l6, ff, l0>     Prog:
<l1, l2, ff, l0>        l1: x = (0 - 10); 
<l2, l6, ff, l0>        (while l2: (x < 0)
<l3, l2, ff, l0>           (if l3: (x < 0)
<l4, l2, ff, l0>              (if l4: (0 < x)
<l5, l2, ff, l0>                 l5: x = (0 - x); ) ) ) 
                     l6: 
**************************************************
*** x=0; while (x<0) { while (x<0) x=x-1; break; }; x= 100;
<l1, l8, ff, l0>     Prog:
<l1, l2, ff, l0>        l1: x = 0; 
<l2, l6, ff, l0>        (while l2: (x < 0)
<l3, l2, tt, l6>           Stmtlist: {
<l3, l5, ff, l0>              (while l3: (x < 0)
<l4, l3, ff, l0>                 l4: x = (x - 1); ) 
<l5, l2, tt, l6>              l5: break; 
                           } ) 
<l6, l7, ff, l0>        l6: ; 
<l7, l8, ff, l0>        l7: x = 100; 
                     l8: 
**************************************************
*** x=-10; while (x<0) { x=x-1; break; }; x= 10;
<l1, l7, ff, l0>     Prog:
<l1, l2, ff, l0>        l1: x = (0 - 10); 
<l2, l5, ff, l0>        (while l2: (x < 0)
<l3, l2, tt, l5>           Stmtlist: {
<l3, l4, ff, l0>              l3: x = (x - 1); 
<l4, l2, tt, l5>              l4: break; 
                           } ) 
<l5, l6, ff, l0>        l5: ; 
<l6, l7, ff, l0>        l6: x = 10; 
                     l7: 
**************************************************
*** x=10; while (0<x) x=x-1;
<l1, l4, ff, l0>     Prog:
<l1, l2, ff, l0>        l1: x = 10; 
<l2, l4, ff, l0>        (while l2: (0 < x)
<l3, l2, ff, l0>           l3: x = (x - 1); ) 
                     l4: 
**************************************************
*** while (0<1){ break; x=1; }
<l1, l4, ff, l0>     Prog:
<l1, l4, ff, l0>        (while l1: (0 < 1)
<l2, l1, tt, l4>           Stmtlist: {
<l2, l3, tt, l4>              l2: break; 
<l3, l1, ff, l0>              l3: x = 1; 
                           } ) 
                     l4: 
**************************************************
# end
